{
    "Bubblesort": [
        {
            "Name": "Bubble Sort",
            "Desc": "Bubble sort is a simple sorting algorithm that repeatedly steps through a list of elements, compares adjacent elements, and swaps them if they are in the wrong order. It gets its name from the way smaller elements \"bubble\" to the top of the list.",
            "Steps": [
                "Start with an unsorted list of elements.",
                "Compare the first element with the second element. If the first element is greater than the second element and swap them.",
                "Move to the next pair of elements (the second and third) and compare them. Again• swap them if they are in the wrong order.",
                "Continue this process• comparing and swapping adjacent elements• until you reach the end of the list.",
                "By the end of the first pass• the largest element will be in its correct position at the end of the list.",
                "Repeat the above steps for the remaining elements (excluding the last one• which is already sorted).",
                "Repeat this process for each subsequent pass• each time placing the next largest element in its correct position.",
                "Continue until the entire list is sorted."
            ],
            "TimeComplexity": {
                "Average Case": "O(n^2)",
                "Best Case": "O(n)",
                "Worst Case": "O(n^2)"
            },
            "SpaceComplexity": "O(1)",
            "Code": {
                "Java": "public class BubbleSort {\n    public static void bubbleSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n-1; i++) {\n            for (int j = 0; j < n-i-1; j++) {\n                if (arr[j] > arr[j+1]) {\n                    int temp = arr[j];\n                    arr[j] = arr[j+1];\n                    arr[j+1] = temp;\n                }\n            }\n        }\n    }\n}",
                "C++": "#include <iostream>\nusing namespace std;\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}",
                "Python": "def bubble_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]",
                "C": "#include <stdio.h>\n\nvoid bubbleSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        for (int j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                int temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}",
                "JavaScript": "function bubbleSort(arr) {\n    var n = arr.length;\n    for (var i = 0; i < n-1; i++) {\n        for (var j = 0; j < n-i-1; j++) {\n            if (arr[j] > arr[j+1]) {\n                var temp = arr[j];\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n}"
            }
        }
    ],
    "Insertionsort": [
        {
            "Name": "Insertion Sort",
            "Desc": "Insertion sort is a simple sorting algorithm that builds the final sorted array one element at a time. It compares each element with the already sorted portion of the array and inserts it into the correct position.",
            "Steps": [
                "Start with an unsorted list of elements.",
                "Iterate through the array from the second element onwards.",
                "Compare the current element with the elements in the sorted portion of the array.",
                "Shift the elements in the sorted portion to the right until the correct position is found for the current element.",
                "Insert the current element into its correct position in the sorted portion.",
                "Repeat the above steps until the entire array is sorted."
            ],
            "TimeComplexity": {
                "Average Case": "O(n^2)",
                "Best Case": "O(n)",
                "Worst Case": "O(n^2)"
            },
            "SpaceComplexity": "O(1)",
            "Code": {
                "Java": "public class InsertionSort {\n    public static void insertionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 1; i < n; i++) {\n            int key = arr[i];\n            int j = i - 1;\n            while (j >= 0 && arr[j] > key) {\n                arr[j + 1] = arr[j];\n                j = j - 1;\n            }\n            arr[j + 1] = key;\n        }\n    }\n}",
                "C++": "#include <iostream>\nusing namespace std;\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}",
                "Python": "def insertion_sort(arr):\n    for i in range(1, len(arr)):\n        key = arr[i]\n        j = i - 1\n        while j >= 0 and arr[j] > key:\n            arr[j + 1] = arr[j]\n            j = j - 1\n        arr[j + 1] = key",
                "C": "#include <stdio.h>\n\nvoid insertionSort(int arr[], int n) {\n    for (int i = 1; i < n; i++) {\n        int key = arr[i];\n        int j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}",
                "JavaScript": "function insertionSort(arr) {\n    for (var i = 1; i < arr.length; i++) {\n        var key = arr[i];\n        var j = i - 1;\n        while (j >= 0 && arr[j] > key) {\n            arr[j + 1] = arr[j];\n            j = j - 1;\n        }\n        arr[j + 1] = key;\n    }\n}"
            }
        }
    ],
    "Selectionsort": [
        {
            "Name": "Selection Sort",
            "Desc": "Selection sort is an in-place comparison sorting algorithm that divides the input array into two parts: the sorted part at the beginning and the unsorted part at the end. It repeatedly selects the smallest element from the unsorted part and swaps it with the first element of the unsorted part.",
            "Steps": [
                "Start with an unsorted list of elements.",
                "Find the smallest element in the unsorted part of the list.",
                "Swap the smallest element with the first element of the unsorted part.",
                "Move the boundary between the sorted and unsorted parts one element to the right.",
                "Repeat the above steps until the entire array is sorted."
            ],
            "TimeComplexity": {
                "Average Case": "O(n^2)",
                "Best Case": "O(n^2)",
                "Worst Case": "O(n^2)"
            },
            "SpaceComplexity": "O(1)",
            "Code": {
                "Java": "public class SelectionSort {\n    public static void selectionSort(int[] arr) {\n        int n = arr.length;\n        for (int i = 0; i < n-1; i++) {\n            int minIdx = i;\n            for (int j = i+1; j < n; j++) {\n                if (arr[j] < arr[minIdx])\n                    minIdx = j;\n            }\n            int temp = arr[minIdx];\n            arr[minIdx] = arr[i];\n            arr[i] = temp;\n        }\n    }\n}",
                "C++": "#include <iostream>\nusing namespace std;\n\nvoid selectionSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        int minIdx = i;\n        for (int j = i+1; j < n; j++) {\n            if (arr[j] < arr[minIdx])\n                minIdx = j;\n        }\n        int temp = arr[minIdx];\n        arr[minIdx] = arr[i];\n        arr[i] = temp;\n    }\n}",
                "Python": "def selection_sort(arr):\n    n = len(arr)\n    for i in range(n-1):\n        min_idx = i\n        for j in range(i+1, n):\n            if arr[j] < arr[min_idx]:\n                min_idx = j\n        arr[i], arr[min_idx] = arr[min_idx], arr[i]",
                "C": "#include <stdio.h>\n\nvoid selectionSort(int arr[], int n) {\n    for (int i = 0; i < n-1; i++) {\n        int minIdx = i;\n        for (int j = i+1; j < n; j++) {\n            if (arr[j] < arr[minIdx])\n                minIdx = j;\n        }\n        int temp = arr[minIdx];\n        arr[minIdx] = arr[i];\n        arr[i] = temp;\n    }\n}",
                "JavaScript": "function selectionSort(arr) {\n    var n = arr.length;\n    for (var i = 0; i < n-1; i++) {\n        var minIdx = i;\n        for (var j = i+1; j < n; j++) {\n            if (arr[j] < arr[minIdx])\n                minIdx = j;\n        }\n        var temp = arr[minIdx];\n        arr[minIdx] = arr[i];\n        arr[i] = temp;\n    }\n}"
            }
        }
    ],
    "Quicksort": [
        {
            "Name": "Quick Sort",
            "Desc": "Quicksort is a divide-and-conquer sorting algorithm that works by selecting a pivot element from the array and partitioning the other elements into two sub-arrays, according to whether they are less than or greater than the pivot. The sub-arrays are then recursively sorted.",
            "Steps": [
                "Choose a pivot element from the array.",
                "Partition the array into two sub-arrays• with elements smaller than the pivot in one sub-array and elements greater than the pivot in the other sub-array.",
                "Recursively apply the above steps to each sub-array.",
                "Combine the sorted sub-arrays and the pivot to produce the final sorted array."
            ],
            "TimeComplexity": {
                "Average Case": "O(n log n)",
                "Best Case": "O(n log n)",
                "Worst Case": "O(n^2)"
            },
            "SpaceComplexity": "O(log n)",
            "Code": {
                "Java": "public class QuickSort {\n    public static void quickSort(int[] arr, int low, int high) {\n        if (low < high) {\n            int pi = partition(arr, low, high);\n            quickSort(arr, low, pi - 1);\n            quickSort(arr, pi + 1, high);\n        }\n    }\n\n    public static int partition(int[] arr, int low, int high) {\n        int pivot = arr[high];\n        int i = low - 1;\n        for (int j = low; j < high; j++) {\n            if (arr[j] < pivot) {\n                i++;\n                int temp = arr[i];\n                arr[i] = arr[j];\n                arr[j] = temp;\n            }\n        }\n        int temp = arr[i + 1];\n        arr[i + 1] = arr[high];\n        arr[high] = temp;\n        return i + 1;\n    }\n}",
                "C++": "#include <iostream>\nusing namespace std;\n\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}",
                "Python": "def quick_sort(arr, low, high):\n    if low < high:\n        pi = partition(arr, low, high)\n        quick_sort(arr, low, pi-1)\n        quick_sort(arr, pi+1, high)\n\n\ndef partition(arr, low, high):\n    pivot = arr[high]\n    i = low - 1\n    for j in range(low, high):\n        if arr[j] < pivot:\n            i += 1\n            arr[i], arr[j] = arr[j], arr[i]\n    arr[i+1], arr[high] = arr[high], arr[i+1]\n    return i+1",
                "C": "#include <stdio.h>\n\nvoid quickSort(int arr[], int low, int high) {\n    if (low < high) {\n        int pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nint partition(int arr[], int low, int high) {\n    int pivot = arr[high];\n    int i = low - 1;\n    for (int j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    int temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}",
                "JavaScript": "function quickSort(arr, low, high) {\n    if (low < high) {\n        var pi = partition(arr, low, high);\n        quickSort(arr, low, pi - 1);\n        quickSort(arr, pi + 1, high);\n    }\n}\n\nfunction partition(arr, low, high) {\n    var pivot = arr[high];\n    var i = low - 1;\n    for (var j = low; j < high; j++) {\n        if (arr[j] < pivot) {\n            i++;\n            var temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n        }\n    }\n    var temp = arr[i + 1];\n    arr[i + 1] = arr[high];\n    arr[high] = temp;\n    return i + 1;\n}"
            }
        }
    ],
    "Mergesort": [
        {
            "Name": "Merge Sort",
            "Desc": "Merge sort is a divide-and-conquer algorithm that divides the input array into two halves, recursively sorts each half, and then merges the two sorted halves to produce a sorted array.",
            "Steps": [
                "Divide the input array into two halves.",
                "Recursively sort each half of the array.",
                "Merge the two sorted halves to produce a single sorted array.",
                "Repeat the above steps until the entire array is sorted."
            ],
            "TimeComplexity": {
                "Average Case": "O(n log n)",
                "Best Case": "O(n log n)",
                "Worst Case": "O(n log n)"
            },
            "SpaceComplexity": "O(n)",
            "Code": {
                "Java": "public class MergeSort {\n    public static void mergeSort(int[] arr, int left, int right) {\n        if (left < right) {\n            int mid = (left + right) / 2;\n            mergeSort(arr, left, mid);\n            mergeSort(arr, mid + 1, right);\n            merge(arr, left, mid, right);\n        }\n    }\n\n    public static void merge(int[] arr, int left, int mid, int right) {\n        int n1 = mid - left + 1;\n        int n2 = right - mid;\n        int[] L = new int[n1];\n        int[] R = new int[n2];\n\n        for (int i = 0; i < n1; i++)\n            L[i] = arr[left + i];\n        for (int j = 0; j < n2; j++)\n            R[j] = arr[mid + 1 + j];\n\n        int i = 0, j = 0;\n        int k = left;\n        while (i < n1 && j < n2) {\n            if (L[i] <= R[j]) {\n                arr[k] = L[i];\n                i++;\n            } else {\n                arr[k] = R[j];\n                j++;\n            }\n            k++;\n        }\n\n        while (i < n1) {\n            arr[k] = L[i];\n            i++;\n            k++;\n        }\n\n        while (j < n2) {\n            arr[k] = R[j];\n            j++;\n            k++;\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 8, 12, 3};\n        mergeSort(arr, 0, arr.length - 1);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}",
                "C++": "#include <iostream>\nusing namespace std;\n\nvoid merge(int arr[], int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    int L[n1], R[n2];\n\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[mid + 1 + j];\n\n    int i = 0;\n    int j = 0;\n    int k = left;\n\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        }\n        else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nint main() {\n    int arr[] = {5, 2, 8, 12, 3};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    mergeSort(arr, 0, size - 1);\n\n    for (int i = 0; i < size; i++)\n        cout << arr[i] << \" \";\n\n    return 0;\n}",
                "Python": "def merge_sort(arr):\n    if len(arr) > 1:\n        mid = len(arr) // 2\n        left_half = arr[:mid]\n        right_half = arr[mid:]\n\n        merge_sort(left_half)\n        merge_sort(right_half)\n\n        i = j = k = 0\n\n        while i < len(left_half) and j < len(right_half):\n            if left_half[i] < right_half[j]:\n                arr[k] = left_half[i]\n                i += 1\n            else:\n                arr[k] = right_half[j]\n                j += 1\n            k += 1\n\n        while i < len(left_half):\n            arr[k] = left_half[i]\n            i += 1\n            k += 1\n\n        while j < len(right_half):\n            arr[k] = right_half[j]\n            j += 1\n            k += 1\n\narr = [5, 2, 8, 12, 3]\nmerge_sort(arr)\nprint(arr)",
                "C": "#include <stdio.h>\n\nvoid merge(int arr[], int left, int mid, int right) {\n    int n1 = mid - left + 1;\n    int n2 = right - mid;\n\n    int L[n1], R[n2];\n\n    for (int i = 0; i < n1; i++)\n        L[i] = arr[left + i];\n    for (int j = 0; j < n2; j++)\n        R[j] = arr[mid + 1 + j];\n\n    int i = 0;\n    int j = 0;\n    int k = left;\n\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        }\n        else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nvoid mergeSort(int arr[], int left, int right) {\n    if (left < right) {\n        int mid = left + (right - left) / 2;\n        mergeSort(arr, left, mid);\n        mergeSort(arr, mid + 1, right);\n        merge(arr, left, mid, right);\n    }\n}\n\nint main() {\n    int arr[] = {5, 2, 8, 12, 3};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    mergeSort(arr, 0, size - 1);\n\n    for (int i = 0; i < size; i++)\n        printf(\"%d \", arr[i]);\n\n    return 0;\n}"
            }
        }
    ],
    "Heapsort": [
        {
            "Name": "Heap Sort",
            "Desc": "Heap sort is an in-place comparison-based sorting algorithm that transforms the input array into a binary heap structure. It repeatedly extracts the maximum element from the heap and places it at the end of the array.",
            "Steps": [
                "Build a max heap from the input array.",
                "Swap the root element (maximum) with the last element in the heap.",
                "Reduce the heap size by 1.",
                "Heapify the root element to maintain the max heap property.",
                "Repeat the above steps until the entire array is sorted."
            ],
            "TimeComplexity": {
                "Average Case": "O(n log n)",
                "Best Case": "O(n log n)",
                "Worst Case": "O(n log n)"
            },
            "SpaceComplexity": "O(1)",
            "Code": {
                "Java": "public class HeapSort {\n    public static void heapSort(int[] arr) {\n        int n = arr.length;\n\n        // Build max heap\n        for (int i = n / 2 - 1; i >= 0; i--)\n            heapify(arr, n, i);\n\n        // Extract elements from the heap in descending order\n        for (int i = n - 1; i > 0; i--) {\n            int temp = arr[0];\n            arr[0] = arr[i];\n            arr[i] = temp;\n\n            heapify(arr, i, 0);\n        }\n    }\n\n    public static void heapify(int[] arr, int n, int i) {\n        int largest = i;\n        int left = 2 * i + 1;\n        int right = 2 * i + 2;\n\n        if (left < n && arr[left] > arr[largest])\n            largest = left;\n\n        if (right < n && arr[right] > arr[largest])\n            largest = right;\n\n        if (largest != i) {\n            int swap = arr[i];\n            arr[i] = arr[largest];\n            arr[largest] = swap;\n\n            heapify(arr, n, largest);\n        }\n    }\n\n    public static void main(String[] args) {\n        int[] arr = {5, 2, 8, 12, 3};\n        heapSort(arr);\n        for (int num : arr) {\n            System.out.print(num + \" \");\n        }\n    }\n}",
                "C++": "#include <iostream>\nusing namespace std;\n\nvoid heapify(int arr[], int n, int i) {\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n\n    if (left < n && arr[left] > arr[largest])\n        largest = left;\n\n    if (right < n && arr[right] > arr[largest])\n        largest = right;\n\n    if (largest != i) {\n        swap(arr[i], arr[largest]);\n        heapify(arr, n, largest);\n    }\n}\n\nvoid heapSort(int arr[], int n) {\n    for (int i = n / 2 - 1; i >= 0; i--)\n        heapify(arr, n, i);\n\n    for (int i = n - 1; i > 0; i--) {\n        swap(arr[0], arr[i]);\n        heapify(arr, i, 0);\n    }\n}\n\nint main() {\n    int arr[] = {5, 2, 8, 12, 3};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    heapSort(arr, size);\n\n    for (int i = 0; i < size; i++)\n        cout << arr[i] << \" \";\n\n    return 0;\n}",
                "Python": "def heapify(arr, n, i):\n    largest = i\n    left = 2 * i + 1\n    right = 2 * i + 2\n\n    if left < n and arr[left] > arr[largest]:\n        largest = left\n\n    if right < n and arr[right] > arr[largest]:\n        largest = right\n\n    if largest != i:\n        arr[i], arr[largest] = arr[largest], arr[i]\n        heapify(arr, n, largest)\n\n\ndef heap_sort(arr):\n    n = len(arr)\n\n    for i in range(n // 2 - 1, -1, -1):\n        heapify(arr, n, i)\n\n    for i in range(n - 1, 0, -1):\n        arr[i], arr[0] = arr[0], arr[i]\n        heapify(arr, i, 0)\n\n\narr = [5, 2, 8, 12, 3]\nheap_sort(arr)\nprint(arr)",
                "C": "#include <stdio.h>\n\nvoid swap(int* a, int* b) {\n    int t = *a;\n    *a = *b;\n    *b = t;\n}\n\nvoid heapify(int arr[], int n, int i) {\n    int largest = i;\n    int left = 2 * i + 1;\n    int right = 2 * i + 2;\n\n    if (left < n && arr[left] > arr[largest])\n        largest = left;\n\n    if (right < n && arr[right] > arr[largest])\n        largest = right;\n\n    if (largest != i) {\n        swap(&arr[i], &arr[largest]);\n        heapify(arr, n, largest);\n    }\n}\n\nvoid heapSort(int arr[], int n) {\n    for (int i = n / 2 - 1; i >= 0; i--)\n        heapify(arr, n, i);\n\n    for (int i = n - 1; i > 0; i--) {\n        swap(&arr[0], &arr[i]);\n        heapify(arr, i, 0);\n    }\n}\n\nint main() {\n    int arr[] = {5, 2, 8, 12, 3};\n    int size = sizeof(arr) / sizeof(arr[0]);\n\n    heapSort(arr, size);\n\n    for (int i = 0; i < size; i++)\n        printf(\"%d \", arr[i]);\n\n    return 0;\n}"
            }
        }
    ]
}